!function(e){function r(e){var r=require("./"+e+"."+o+".hot-update.js");!function(e,r){if(!g[e]||!O[e])return;for(var t in O[e]=!1,r)Object.prototype.hasOwnProperty.call(r,t)&&(h[t]=r[t]);0==--v&&0===b&&_()}(r.id,r.modules)}var t,n=!0,o="e3239f30ec795f7541eb",i={},s=[],c=[];function d(e){var r=E[e];if(!r)return P;var n=function(n){return r.hot.active?(E[n]?-1===E[n].parents.indexOf(e)&&E[n].parents.push(e):(s=[e],t=n),-1===r.children.indexOf(n)&&r.children.push(n)):(console.warn("[HMR] unexpected require("+n+") from disposed module "+e),s=[]),P(n)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return P[e]},set:function(r){P[e]=r}}};for(var i in P)Object.prototype.hasOwnProperty.call(P,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(n,i,o(i));return n.e=function(e){return"ready"===u&&p("prepare"),b++,P.e(e).then(r,function(e){throw r(),e});function r(){b--,"prepare"===u&&(m[e]||j(e),0===b&&0===v&&_())}},n.t=function(e,r){return 1&r&&(e=n(e)),P.t(e,-2&r)},n}function a(e){var r={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:t!==e,active:!0,accept:function(e,t){if(void 0===e)r._selfAccepted=!0;else if("function"==typeof e)r._selfAccepted=e;else if("object"==typeof e)for(var n=0;n<e.length;n++)r._acceptedDependencies[e[n]]=t||function(){};else r._acceptedDependencies[e]=t||function(){}},decline:function(e){if(void 0===e)r._selfDeclined=!0;else if("object"==typeof e)for(var t=0;t<e.length;t++)r._declinedDependencies[e[t]]=!0;else r._declinedDependencies[e]=!0},dispose:function(e){r._disposeHandlers.push(e)},addDisposeHandler:function(e){r._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=r._disposeHandlers.indexOf(e);t>=0&&r._disposeHandlers.splice(t,1)},check:x,apply:D,status:function(e){if(!e)return u;l.push(e)},addStatusHandler:function(e){l.push(e)},removeStatusHandler:function(e){var r=l.indexOf(e);r>=0&&l.splice(r,1)},data:i[e]};return t=void 0,r}var l=[],u="idle";function p(e){u=e;for(var r=0;r<l.length;r++)l[r].call(null,e)}var f,h,y,v=0,b=0,m={},O={},g={};function w(e){return+e+""===e?+e:e}function x(e){if("idle"!==u)throw new Error("check() is only allowed in idle status");return n=e,p("check"),function(){try{var e=require("./"+o+".hot-update.json")}catch(e){return Promise.resolve()}return Promise.resolve(e)}().then(function(e){if(!e)return p("idle"),null;O={},m={},g=e.c,y=e.h,p("prepare");var r=new Promise(function(e,r){f={resolve:e,reject:r}});h={};return j(0),"prepare"===u&&0===b&&0===v&&_(),r})}function j(e){g[e]?(O[e]=!0,v++,r(e)):m[e]=!0}function _(){p("ready");var e=f;if(f=null,e)if(n)Promise.resolve().then(function(){return D(n)}).then(function(r){e.resolve(r)},function(r){e.reject(r)});else{var r=[];for(var t in h)Object.prototype.hasOwnProperty.call(h,t)&&r.push(w(t));e.resolve(r)}}function D(r){if("ready"!==u)throw new Error("apply() is only allowed in ready status");var t,n,c,d,a;function l(e){for(var r=[e],t={},n=r.slice().map(function(e){return{chain:[e],id:e}});n.length>0;){var o=n.pop(),i=o.id,s=o.chain;if((d=E[i])&&!d.hot._selfAccepted){if(d.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:i};if(d.hot._main)return{type:"unaccepted",chain:s,moduleId:i};for(var c=0;c<d.parents.length;c++){var a=d.parents[c],l=E[a];if(l){if(l.hot._declinedDependencies[i])return{type:"declined",chain:s.concat([a]),moduleId:i,parentId:a};-1===r.indexOf(a)&&(l.hot._acceptedDependencies[i]?(t[a]||(t[a]=[]),f(t[a],[i])):(delete t[a],r.push(a),n.push({chain:s.concat([a]),id:a})))}}}}return{type:"accepted",moduleId:e,outdatedModules:r,outdatedDependencies:t}}function f(e,r){for(var t=0;t<r.length;t++){var n=r[t];-1===e.indexOf(n)&&e.push(n)}}r=r||{};var v={},b=[],m={},O=function(){console.warn("[HMR] unexpected require("+j.moduleId+") to disposed module")};for(var x in h)if(Object.prototype.hasOwnProperty.call(h,x)){var j;a=w(x);var _=!1,D=!1,A=!1,k="";switch((j=h[x]?l(a):{type:"disposed",moduleId:x}).chain&&(k="\nUpdate propagation: "+j.chain.join(" -> ")),j.type){case"self-declined":r.onDeclined&&r.onDeclined(j),r.ignoreDeclined||(_=new Error("Aborted because of self decline: "+j.moduleId+k));break;case"declined":r.onDeclined&&r.onDeclined(j),r.ignoreDeclined||(_=new Error("Aborted because of declined dependency: "+j.moduleId+" in "+j.parentId+k));break;case"unaccepted":r.onUnaccepted&&r.onUnaccepted(j),r.ignoreUnaccepted||(_=new Error("Aborted because "+a+" is not accepted"+k));break;case"accepted":r.onAccepted&&r.onAccepted(j),D=!0;break;case"disposed":r.onDisposed&&r.onDisposed(j),A=!0;break;default:throw new Error("Unexception type "+j.type)}if(_)return p("abort"),Promise.reject(_);if(D)for(a in m[a]=h[a],f(b,j.outdatedModules),j.outdatedDependencies)Object.prototype.hasOwnProperty.call(j.outdatedDependencies,a)&&(v[a]||(v[a]=[]),f(v[a],j.outdatedDependencies[a]));A&&(f(b,[j.moduleId]),m[a]=O)}var H,q=[];for(n=0;n<b.length;n++)a=b[n],E[a]&&E[a].hot._selfAccepted&&q.push({module:a,errorHandler:E[a].hot._selfAccepted});p("dispose"),Object.keys(g).forEach(function(e){!1===g[e]&&function(e){delete installedChunks[e]}(e)});for(var I,S,T=b.slice();T.length>0;)if(a=T.pop(),d=E[a]){var M={},C=d.hot._disposeHandlers;for(c=0;c<C.length;c++)(t=C[c])(M);for(i[a]=M,d.hot.active=!1,delete E[a],delete v[a],c=0;c<d.children.length;c++){var U=E[d.children[c]];U&&((H=U.parents.indexOf(a))>=0&&U.parents.splice(H,1))}}for(a in v)if(Object.prototype.hasOwnProperty.call(v,a)&&(d=E[a]))for(S=v[a],c=0;c<S.length;c++)I=S[c],(H=d.children.indexOf(I))>=0&&d.children.splice(H,1);for(a in p("apply"),o=y,m)Object.prototype.hasOwnProperty.call(m,a)&&(e[a]=m[a]);var J=null;for(a in v)if(Object.prototype.hasOwnProperty.call(v,a)&&(d=E[a])){S=v[a];var R=[];for(n=0;n<S.length;n++)if(I=S[n],t=d.hot._acceptedDependencies[I]){if(-1!==R.indexOf(t))continue;R.push(t)}for(n=0;n<R.length;n++){t=R[n];try{t(S)}catch(e){r.onErrored&&r.onErrored({type:"accept-errored",moduleId:a,dependencyId:S[n],error:e}),r.ignoreErrored||J||(J=e)}}}for(n=0;n<q.length;n++){var N=q[n];a=N.module,s=[a];try{P(a)}catch(e){if("function"==typeof N.errorHandler)try{N.errorHandler(e)}catch(t){r.onErrored&&r.onErrored({type:"self-accept-error-handler-errored",moduleId:a,error:t,originalError:e}),r.ignoreErrored||J||(J=t),J||(J=e)}else r.onErrored&&r.onErrored({type:"self-accept-errored",moduleId:a,error:e}),r.ignoreErrored||J||(J=e)}}return J?(p("fail"),Promise.reject(J)):(p("idle"),new Promise(function(e){e(b)}))}var E={};function P(r){if(E[r])return E[r].exports;var t=E[r]={i:r,l:!1,exports:{},hot:a(r),parents:(c=s,s=[],c),children:[]};return e[r].call(t.exports,t,t.exports,d(r)),t.l=!0,t.exports}P.m=e,P.c=E,P.d=function(e,r,t){P.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:t})},P.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},P.t=function(e,r){if(1&r&&(e=P(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(P.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var n in e)P.d(t,n,function(r){return e[r]}.bind(null,n));return t},P.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return P.d(r,"a",r),r},P.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},P.p="/Users/saifurrehman/Desktop/POCs/cumulus-bank/ODM-Microservice/dist",P.h=function(){return o},d(0)(P.s=0)}([function(e,r,t){t(1),e.exports=t(2)},function(e,r){e.exports=require("@babel/polyfill")},function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(3),o=t(4),i=t(5);o("ts-express:server");const s=function(e){let r="string"==typeof e?parseInt(e,10):e;return isNaN(r)?e:r>=0&&r}(3005);i.default.set("port",s);const c=n.createServer(i.default);c.listen(s),c.on("error",function(e){if("listen"!==e.syscall)throw e;let r="string"==typeof s?"Pipe "+s:"Port "+s;switch(e.code){case"EACCES":console.error(`${r} requires elevated privileges`),process.exit(1);break;case"EADDRINUSE":console.error(`${r} is already in use`),process.exit(1);break;default:throw e}}),c.on("listening",function(){let e=c.address(),r="string"==typeof e?`pipe ${e}`:`port ${e.port}`;o(`Listening on ${r}`)})},function(e,r){e.exports=require("http")},function(e,r){e.exports=require("debug")},function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(6),o=t(7),i=t(8),s=t(9),c=t(10),d=t(11),a=t(12);r.default=(new class{constructor(){this.jwtOptions={},this.ExtractJwt=c.ExtractJwt,this.JwtStrategy=c.ExtractJwt,this.jwtOptions.jwtFromRequest=this.ExtractJwt.fromAuthHeaderAsBearerToken(),this.jwtOptions.secretOrKey=process.env.SECRET,this.express=n(),a.instrument(this.express),this.middleware(),this.routes()}ensureToken(e,r,t){const n=e.headers.authorization;if(void 0!==n){const r=n.split(" ")[1];e.token=r,t()}else r.sendStatus(403)}middleware(){this.express.use(function(e,r,t){r.header("Access-Control-Allow-Origin","*"),r.header("Access-Control-Allow-Headers","X-Requested-With,content-type,Content-Type, Access-Control-Allow-Headers, Authorization"),r.header("Access-Control-Allow-Methods","GET, POST, OPTIONS, PUT, PATCH, DELETE"),t()}),this.express.use(o("dev")),this.express.use(i.json()),this.express.use(s.initialize()),this.express.use(i.urlencoded({extended:!1}))}routes(){let e=n.Router();e.post("/odm",this.ensureToken,(e,r,t)=>{d.post({headers:{"content-type":"application/json"},url:process.env.ODM,body:JSON.stringify({flightBooking:{srcAirport:e.body.srcAirport,dstAirport:e.body.dstAirport,customerTier:e.body.customerTier,milesBalance:e.body.milesBalance,offers:[],messages:[]}})},(e,t,n)=>{e&&(r.status(404).json({err:e}),console.log(e)),r.json(JSON.parse(n))})}),e.get("/healthz",(e,r,t)=>{r.send("success")}),this.express.use("/",e)}}).express},function(e,r){e.exports=require("express")},function(e,r){e.exports=require("morgan")},function(e,r){e.exports=require("body-parser")},function(e,r){e.exports=require("passport")},function(e,r){e.exports=require("passport-jwt")},function(e,r){e.exports=require("request")},function(e,r){e.exports=require("epimetheus")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,